pipeline {
    agent any
    
    stages {
        stage('checkout') {
            steps {
              checkout([$class: 'GitSCM', 
                branches: [[name: '*/master']],
                userRemoteConfigs: [[
                    url: 'https://lab.ssafy.com/s10-webmobile3-sub2/S10P12A204.git',
                    credentialsId: '' # Jenkins 용으로 발급받은 Gitlab credential 사용
                ]]])
          }
        }
        
        stage('clean & build') {
            steps {
                dir ('backend/eatingSSAFY') {
                    sh '''
                        echo build start
                        sudo cp ~/eatingssafy/fcm-service-account.json src/main/resources/
                        chmod +x ./gradlew
                        ./gradlew clean bootJar
                    '''
                }
            }
        }
        
        stage('docker-clean-up') {
            steps {
                script {
                    sh '''
                    if test "`docker ps -aq --filter name=be-container`"; then
        				docker stop be-container
                        docker rm -f be-container
                        docker rmi eatingssafy_be-container
                    fi
                    
                    if test "`docker ps -aq --filter name=fe-container`"; then
                        docker stop fe-container
                        docker rm -f fe-container
                        docker rmi eatingssafy_fe-container
                    fi
                    
                    if test "`docker ps -aq --filter name=mqtt-container`"; then
                        docker stop mqtt-container
                        docker rm -f mqtt-container
                        docker rmi eatingssafy_mqtt-container
                    fi
                    '''
                }
                
            }
        }
        
        stage('docker-compose up'){
            steps {
                script {
                    sh """
                        if ! command -v docker > /dev/null; then
                            curl -fsSL https://get.docker.com -o get-docker.sh
                            sh get-docker.sh
                        fi
                    """
                    
                    sh '''
                    echo 'create .env file'
                    echo DB_ROOT_PASSWORD=${DB_ROOT_PASSWORD} >> .env
                    echo DB_USER_NAME=${DB_USER_NAME} >> .env
                    echo DB_PASSWORD=${DB_PASSWORD} >> .env
                    echo DB_NAME=${DB_NAME} >> .env
                    echo DB_HOST=${DB_HOST} >> .env
                    echo MAIL_PASSWORD=${MAIL_PASSWORD} >> .env
                    echo MAIL_USERNAME=${MAIL_USERNAME} >> .env
                    echo OCR_REQUEST_URL=${OCR_REQUEST_URL} >> .env
                    echo OCR_SECRET_KEY=${OCR_SECRET_KEY} >> .env
                    echo BACKEND_HOST=${BACKEND_HOST} >> .env
                    echo BACKEND_PORT=${BACKEND_PORT} >> .env
                    echo BROKER_HOST=${BROKER_HOST} >> .env
                    echo BROKER_PORT=${BROKER_PORT} >> .env
                    echo BRIDGE_PORT=${BRIDGE_PORT} >> .env
                    echo RESOURCE_DIR=${RESOURCE_DIR} >> .env
                    echo BASIC_URL=https://i10a204.p.ssafy.io >> .env
                    echo KAKAO_API_KEY=${KAKAO_API_KEY} >> .env
                    echo KAKAO_CLIENT_SECRET=${KAKAO_CLIENT_SECRET} >> .env
                    echo KAKAO_REDIRECT_URI=${KAKAO_REDIRECT_URI} >> .env
                    
                    docker-compose --env-file .env config
                    docker-compose up -d
                    '''
                }
            }
        }
    }
}